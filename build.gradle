buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

plugins {
    id "org.sonarqube" version "1.2"
}
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

sonarqube {
    properties{
        property "sonar.host.url", "http://home.kk-sc.de:9000"
        property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", System.getenv()['SONARDBUS']
        property "sonar.jdbc.password", System.getenv()['SONARDBPW']
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "Minecolonies"
        property "sonar.login", System.getenv()['SONARUSER']
        property "sonar.password", System.getenv()['SONARPW']
    }
}

checkstyle {
    ignoreFailures = true
    showViolations = false
}

findbugs {
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

pmd {
    ignoreFailures = true
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

apply plugin: 'forge'

ext.configFile = file "build.properties"

configFile.withReader {

    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

group = "com.minecolonies"
version = "${config.minecraft_version}-${config.minecolonies_major}.${config.minecolonies_minor}.${config.minecolonies_build}"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {

    version = config.forge_version + "-" + config.minecraft_version
    runDir = "run"
    replace "@VERSION@", project.version
    replaceIn "lib/Constants.java"
    if (project.hasProperty("signature"))
        replace "@FINGERPRINT@", signature
}

processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    appendix = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'deobf'
}

task incrementBuildNumber() {
    dependsOn "reobf"
    doLast {
        config.minecolonies_build = (config.minecolonies_build.toString().toInteger()) + 1

        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

jar {
    appendix = 'universal'
}

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}